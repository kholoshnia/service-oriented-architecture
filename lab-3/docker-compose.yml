version: "3.9"

services:
  os-storage-postgres:
    container_name: ${STORAGE_POSTGRES_NAME}
    image: postgres:13.4-alpine
    restart: always
    environment:
      POSTGRES_USER: ${STORAGE_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${STORAGE_POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${STORAGE_POSTGRES_DATABASE}
    networks:
      - os-storage-network
    ports:
      - "${STORAGE_POSTGRES_PORT}:5432"

  os-storage-consul:
    container_name: ${STORAGE_CONSUL_NAME}
    image: hashicorp/consul:1.11.2
    restart: always
    networks:
      - os-storage-network
    ports:
      - "${STORAGE_CONSUL_UI_PORT}:8500"
      - "8600:8600"

  os-storage-service:
    build:
      context: services
      dockerfile: storage/${STORAGE_SERVICE_DOCKERFILE}
    restart: always
    environment:
      server.address: ${STORAGE_SERVICE_HOST}
      server.port: ${STORAGE_SERVICE_PORT}
      server.ssl.key-alias: ${SSL_DOMAIN}
      server.ssl.key-store: ${SSL_P12_PATH}
      server.ssl.key-store-password: ${SSL_P12_PASSWORD}
      spring.application.name: ${STORAGE_SERVICE_NAME}
      spring.datasource.url: ${STORAGE_SERVICE_POSTGRES_URL}
      spring.datasource.username: ${STORAGE_POSTGRES_USERNAME}
      spring.datasource.password: ${STORAGE_POSTGRES_PASSWORD}
      spring.cloud.consul.host: ${STORAGE_CONSUL_NAME}
      spring.cloud.consul.port: ${STORAGE_CONSUL_PORT}
      spring.cloud.consul.discovery.health-check-url: null
      spring.cloud.consul.discovery.health-check-interval: ${STORAGE_SERVICE_HEALTH_CHECK_INTERVAL}
    depends_on:
      - os-storage-postgres
      - os-storage-consul
    networks:
      - os-storage-network
    volumes:
      - ${SSL_HOST_PATH}:${SSL_CONTAINER_PATH}
    deploy:
      replicas: ${STORAGE_SERVICE_INSTANCES}

  os-storage-haproxy:
    container_name: ${STORAGE_HAPROXY_NAME}
    image: haproxy:2.4.20-bullseye
    restart: always
    environment:
      STORAGE_HAPROXY_STATS_PORT: ${STORAGE_HAPROXY_STATS_PORT}
      STORAGE_HAPROXY_PORT: ${STORAGE_HAPROXY_PORT}
      STORAGE_SERVICE_HEALTH_CHECK_INTERVAL: ${STORAGE_SERVICE_HEALTH_CHECK_INTERVAL}
      STORAGE_SERVICE_INSTANCES: ${STORAGE_SERVICE_INSTANCES}
      STORAGE_CONSUL_HOST: ${STORAGE_CONSUL_NAME}
      STORAGE_CONSUL_DNS_PORT: ${STORAGE_CONSUL_DNS_PORT}
      SSL_PEM_PATH: ${SSL_PEM_PATH}
    depends_on:
      - os-storage-consul
    networks:
      - os-storage-network
    ports:
      - "${STORAGE_HAPROXY_STATS_PORT}:${STORAGE_HAPROXY_STATS_PORT}"
      - "${STORAGE_HAPROXY_PORT}:${STORAGE_HAPROXY_PORT}"
    volumes:
      - ${STORAGE_HAPROXY_CONFIG_HOST_PATH}:/usr/local/etc/haproxy
      - ${SSL_HOST_PATH}:${SSL_CONTAINER_PATH}

#  os-shop-service:
#    container_name: ${SHOP_SERVICE_NAME}
#    build:
#      context: services
#      dockerfile: shop/Dockerfile
#    environment:
#      SHOP_SERVICE_HOST: ${SHOP_SERVICE_HOST}
#      SHOP_SERVICE_PORT: ${SHOP_SERVICE_PORT}
#      SHOP_STORAGE_API_BASE_URL: ${SHOP_STORAGE_API_BASE_URL}
#      SSL_P12_PATH: ${SSL_P12_PATH}
#      SSL_P12_PASSWORD: ${SSL_P12_PASSWORD}
#      SSL_DOMAIN: ${SSL_DOMAIN}
#    ports:
#      - "${SHOP_SERVICE_PORT}:${SHOP_SERVICE_PORT}"
#    networks:
#      - os-shop-network
#      - os-frontend-network
#    volumes:
#      - ${SSL_HOST_PATH}:${SSL_CONTAINER_PATH}

#  os-frontend:
#    container_name: ${FRONTEND_NAME}
#    build:
#      context: frontend
#      args:
#        REACT_APP_STORAGE_API_URL: ${FRONTEND_STORAGE_API_BASE_URL}
#        REACT_APP_SHOP_API_URL: ${FRONTEND_SHOP_API_BASE_URL}
#    environment:
#      SSL_DOMAIN: ${SSL_DOMAIN}
#      SSL_CRT_PATH: ${SSL_CRT_PATH}
#      SSL_KEY_PATH: ${SSL_KEY_PATH}
#    ports:
#      - "${FRONTEND_PORT}:443"
#    networks:
#      - os-frontend-network
#    volumes:
#      - ${SSL_HOST_PATH}:${SSL_CONTAINER_PATH}

networks:
  os-storage-network:
    name: os-storage-network
    driver: bridge
  os-shop-network:
    name: os-shop-network
    driver: bridge
  os-frontend-network:
    name: os-frontend-network
    external: true
